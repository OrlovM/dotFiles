-- require("mason").setup {}
-- require("mason-lspconfig").setup()
-- require("neodev").setup()
--
-- require "custom.lsp.diagnostic"
-- -- Mappings.
-- -- See `:help vim.diagnostic.*` for documentation on any of the below functions
--
-- -- Use an on_attach function to only map the following keys
-- -- after the language server attaches to the current buffer
-- local opts = { buffer = bufnr, noremap = true, silent = true }
-- local on_attach = function(client, bufnr)
--   -- Enable completion triggered by <c-x><c-o>
--   vim.api.nvim_buf_set_option(bufnr, 'omnifunc', 'v:lua.vim.lsp.omnifunc')
--
--   -- Mappings.
--   -- See `:help vim.lsp.*` for documentation on any of the below functions
--   -- vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gD', '<cmd>lua vim.lsp.buf.declaration()<CR>', opts)
--   -- vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>', opts)
--   -- vim.api.nvim_buf_set_keymap(bufnr, 'n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>', opts)
--   -- vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
--   -- vim.api.nvim_buf_set_keymap(bufnr, 'n', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
--   -- vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)
--   -- vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)
--   -- vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>wl',
--     -- '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)
--   -- vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
--   -- vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
--   -- vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>ca', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
--   -- vim.keymap.set('n', '<space>f', function()
--   --   vim.lsp.buf.format { async = true }
--   -- end, opts)
--   -- Highlight same ids
--   if client.server_capabilities.documentHighlightProvider then
--     vim.api.nvim_create_augroup('lsp_document_highlight', {
--       clear = false
--     })
--     vim.api.nvim_clear_autocmds({
--       buffer = bufnr,
--       group = 'lsp_document_highlight',
--     })
--     vim.api.nvim_create_autocmd({ 'CursorHold', 'CursorHoldI' }, {
--       group = 'lsp_document_highlight',
--       buffer = bufnr,
--       callback = vim.lsp.buf.document_highlight,
--     })
--     vim.api.nvim_create_autocmd('CursorMoved', {
--       group = 'lsp_document_highlight',
--       buffer = bufnr,
--       callback = vim.lsp.buf.clear_references,
--     })
--   end
-- end
--
-- -- Setup nvim-cmp.
--
-- -- Use a loop to conveniently call 'setup' on multiple servers and
-- -- map buffer local keybindings when the language server attaches
-- local capabilities = vim.lsp.protocol.make_client_capabilities()
--
-- local servers = {
--   'pyright',
--   'tsserver',
--   'vimls',
--   'vuels',
--   'bashls',
--   'marksman',
--   'yamlls',
--   'dockerls',
--   'ruby_lsp',
--   'bufls',
-- }
--
-- for _, lsp in pairs(servers) do
--   require('lspconfig')[lsp].setup {
--     on_attach = on_attach,
--     capabilities = capabilities
--   }
-- end
--
-- require('lspconfig').jsonls.setup {
--   on_attach = on_attach,
--   settings = {
--     json = {
--       schemas = require('schemastore').json.schemas(),
--       validate = { enable = true },
--     },
--   },
-- }
--
-- require 'lspconfig'.lua_ls.setup {
--   on_attach = on_attach,
--   capabilities = capabilities,
--   settings = {
--     Lua = {
--       completion = {
--         callSnippet = "Replace"
--       },
--       runtime = {
--         -- Tell the language server which version of Lua you're using (most likely LuaJIT in the case of Neovim)
--         version = 'LuaJIT',
--       },
--       diagnostics = {
--         -- Get the language server to recognize the `vim` global
--         globals = { 'vim' },
--       },
--       workspace = {
--         -- Make the server aware of Neovim runtime files
--         library = vim.api.nvim_get_runtime_file("", true),
--       },
--       -- Do not send telemetry data containing a randomized but unique identifier
--       telemetry = {
--         enable = false,
--       },
--     },
--   },
-- }
--
-- require 'lspconfig'.gopls.setup {
--   on_attach = on_attach,
--   capabilities = capabilities,
--   cmd = { 'gopls', '--remote=auto' },
--   settings = {
--     gopls = {
--       analyses = {
--         unusedparams = true,
--       },
--       staticcheck = true,
--     },
--   },
-- }
--
-- local disabled_go_linters = {
--   "deadcode",
--   "scopelint",
--   "nlreturn",
--   "varcheck",
--   "ifshort",
--   "interfacer",
--   "structcheck",
--   "maligned",
--   "nosnakecase",
--   "golint",
--   "tagliatelle",
--   "varnamelen",
--   "lll",
--   "exhaustruct",
--   "exhaustivestruct",
--   "typecheck",
--   "wrapcheck",
--   "godox",
--   "depguard",
--   "ireturn",
-- }
--
-- require 'lspconfig'.golangci_lint_ls.setup {
--   on_attach = on_attach,
--   cmd = { 'golangci-lint-langserver', '--nolintername' },
--   init_options = {
--     command = { "golangci-lint", "run", "--enable-all", "--disable",
--       table.concat(disabled_go_linters, ","), "--out-format", "json" },
--   },
-- }
--
-- -- require'lspconfig'.ruby_ls.setup{ on_attach = on_attach }
--
-- require 'lspconfig'.eslint.setup { on_attach = on_attach }
--
--
--
-- vim.lsp.handlers["textDocument/publishDiagnostics"] = vim.lsp.with(
--   vim.lsp.diagnostic.on_publish_diagnostics, {
--     severity_sort = true
--   }
-- )
